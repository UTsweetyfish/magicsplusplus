
/*******************************  LICENSE  *******************************

 * (C) Copyright 1996-2016 ECMWF.
 * 
 * This software is licensed under the terms of the Apache Licence Version 2.0
 * which can be obtained at http://www.apache.org/licenses/LICENSE-2.0. 
 * In applying this licence, ECMWF does not waive the privileges and immunities 
 * granted to it by virtue of its status as an intergovernmental organisation nor
 * does it submit to any jurisdiction.

 *******************************  LICENSE  *******************************/

/*! \file{{ object }}Attributes.h
    \brief Definition of {{ object }} Attributes class.

    This file is automatically generated.
    Do Not Edit!

    Generated: {{ genereated }}
*/
   

#ifndef {{ object }}Attributes_H
#define {{ object }}Attributes_H

#include "magics.h"
{% for include  in include -%} 
#include "{{ include }}"
{% endfor -%} 


namespace magics {

class XmlNode;
class {{ object }}Attributes {{ ":" if not implements | length == 0 }}
{% for i in implements -%}
	{{ '    ' }}public {{ i }}{{ "," if not loop.last }}
{% endfor -%} 
{
public:
//  --  constructor
    {{ object }}Attributes();
    
//  --  destructor
    virtual ~{{ object }}Attributes();
    
    virtual void set(const std::map<std::string, std::string>&);
    virtual void set(const XmlNode&);
    virtual void copy(const {{ object }}Attributes&);
    virtual bool accept(const std::string&);

    void setTag(const std::string& tag) { tag_ = tag; }

public:
	//  --  method
	virtual void print(std::ostream&) const;
	virtual void toxml(std::ostream& out) const;
	//  --  members:
	string tag_;
	{% for param  in string_parameters -%} 
	{{ param.to }} {{ param.member }}_;
	{% endfor -%}
	{% for param  in factory_parameters -%} 
	{% if param.enum  -%}
	{{ param.to }} {{ param.member }}_;
	{% else -%}
 	unique_ptr<{{ param.to }}> {{ param.member }}_;
	{% endif -%}
	{% endfor %} 

private:
	friend ostream& operator<<(ostream& s,const {{ object }}Attributes& p)
	{ p.print(s); return s; }
};

} // namespace magics

#endif


